

from collections import deque
def BFS(container_1, container_2, target):
    m = {}
    isSolvable = False
    path = []

    q = deque()

    q.append((0, 0))

    while (len(q) > 0):
        u = q.popleft()
        if ((u[0], u[1]) in m):
            continue
        if ((u[0] > container_1 or u[1] > container_2 or
             u[0] < 0 or u[1] < 0)):
            continue
        path.append([u[0], u[1]])
        m[(u[0], u[1])] = 1
        if (u[0] == target or u[1] == target):
            isSolvable = True
            if (u[0] == target):
                if (u[1] != 0):
                    path.append([u[0], 0])
            else:
                if (u[0] != 0):
                    path.append([0, u[1]])
            sz = len(path)
            for i in range(sz):
                print("-->""(", path[i][0], ",",
                      path[i][1], ")", "-->")
            break
        q.append([u[0], container_2])
        q.append([container_1, u[1]])

        for ap in range(max(container_1, container_2) + 1):
            c = u[0] + ap
            d = u[1] - ap
            if (c == container_1 or (d == 0 and d >= 0)):
                q.append([c, d])
            c = u[0] - ap
            d = u[1] + ap

            if ((c == 0 and c >= 0) or d == container_2):
                q.append([c, d])
        q.append([container_1, 0])
        q.append([0, container_2])
    if (not isSolvable):
        print("No solution")
if __name__ == '__main__':
    J1, J2, target = 4, 3, 2
    print("Path is :- \n");

    BFS(J1, J2, target)
